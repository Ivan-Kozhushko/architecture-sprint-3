@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Система "Теплый Дом". Containers.

Person(user, "User", "Пользователь системы Теплый Дом")

System_Boundary(SmartHomeSystem, 'Система \"Теплый Дом\"') {
    Container(apiGateway, "API Gateway", "Обрабатывает входящие запросы и направляет их к соответствующим сервисам")
    Container(deviceManagementService, "Device Management Service", "Управляет функциями устройств")
    Container(scenarioManagmentService, "Scenario Management Service", "Управляет автоматическими сценариями")
    Container(userManagmentService, "User Management Service","Управляет информацией о пользователях и аутентификацией")
    Container(deviceMonitoringService, "Device Monitoring Service", "Мониторинг и статус устройств")
    Container(notificationService, "Notification Service", "Сервис уведомлений")
    Container(userSupportService, "User Support Service", "Тех. поддержка пользователей")

    ContainerDb(deviceDb, "Device DB", "PostgreSQL", "Хранит информацию об устройствах")
    ContainerDb(scenarioDb, "Scenari DB", "PostgreSQL", "Хранит информацию об автоматических сценариях")
    ContainerDb(userDb, "User DB", "PostgreSQL", "Хранит информацию о пользователе")
    ContainerDb(monitoringDb, "Monitoring DB", "PostgreSQL", "Хранит статус и данные с датчиков")
    ContainerDb(notificationDb, "Notification DB", "PostgreSQL", "Хранит данные об уведомлениях")
    ContainerDb(userSupportDb, "User Support DB", "PostgreSQL", "Хранит данные об обращениях пользователей")

    Container(kafka, "Kafka", "Apache Kafka", "Брокер сообщений для асинхронного взаимодействия")
}

Rel(user, apiGateway, "Использует приложение")
Rel(apiGateway, deviceManagementService, "Направляет запрос к")
Rel(apiGateway, scenarioManagmentService, "Направляет запрос к")
Rel(apiGateway, userManagmentService, "Направляет запрос к")
Rel(apiGateway, deviceMonitoringService, "Направляет запрос к")
Rel(apiGateway, notificationService, "Направляет запрос к")
Rel(apiGateway, userSupportService, "Направляет запрос к")

Rel(deviceManagementService, deviceDb, "Читает и записывает")
Rel(scenarioManagmentService, scenarioDb, "Читает и записывает")
Rel(userManagmentService, userDb, "Читает и записывает")
Rel(deviceMonitoringService, monitoringDb, "Читает и записывает")
Rel(notificationService, notificationDb, "Читает и записывает")
Rel(userSupportService, userSupportDb, "Читает и записывает")

Rel(deviceManagementService, kafka, "Публикует события в", "Топик Kafka")
Rel(deviceMonitoringService, kafka, "Публикует события в", "Топик Kafka")
Rel(notificationService, kafka, "Подписан на события от", "Топик Kafka")
Rel(scenarioManagmentService, kafka, "Подписан на события от", "Топик Kafka")

Container_Ext(sensor, "Sensor", "Датчики", "Отправляет данные в систему")
Rel(sensor, deviceManagementService, "Отправляет данные к")
Rel(sensor, deviceMonitoringService, "Отправляет данные мониторинга к")
Rel(sensor, kafka, "Публикует события в", "Топик Kafka")

@enduml